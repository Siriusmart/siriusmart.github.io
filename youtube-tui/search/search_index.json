{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview YouTube TUI is a lightweight and user friendly TUI for browsing YouTube content in terminal. Features Search for videos View video, playlists and channels Not using the YouTube API Intuitive user interface Playing video/audio Downloading videos Written in Rust (it will be blazingly fast) Customizable YouTube TUI is a customizable TUI, anything from keybindings to screen layouts can be modified in config files. The TUI is made of pages and each page contains items , these items can be moved around or removed to your likings by editing the config files located in ~/.config/youtube-tui . The default layout resembles to YouTube site for users to get started quickly.","title":"Home"},{"location":"#overview","text":"YouTube TUI is a lightweight and user friendly TUI for browsing YouTube content in terminal.","title":"Overview"},{"location":"#features","text":"Search for videos View video, playlists and channels Not using the YouTube API Intuitive user interface Playing video/audio Downloading videos Written in Rust (it will be blazingly fast)","title":"Features"},{"location":"#customizable","text":"YouTube TUI is a customizable TUI, anything from keybindings to screen layouts can be modified in config files. The TUI is made of pages and each page contains items , these items can be moved around or removed to your likings by editing the config files located in ~/.config/youtube-tui . The default layout resembles to YouTube site for users to get started quickly.","title":"Customizable"},{"location":"configs/","text":"Config files One way to customize YouTube TUI is with config files in ~/.config/youtube-tui , the config files are in the yaml format for easy reading. Smart configs If there is a missing option in the config files, it will be added automatically If the config files could not be parsed, it will be backed up to config.yml.old (only 1 backup will be created for each file, the newer backup overwrites the older one) main.yml Contains some basic options for the TUI, and also env which will be used in commands. --- max_watch_history: 50 server_url: \"https://invidious.sethforprivacy.com\" env: download_location: ~/Downloads/%(title)s.%(ext)s max_watch_history The maximum number of watch history stored, watch history contains the video details and a low definition thumbnail. Watch history can be viewed in the history tab in main menu. server_url The URL of the Invidious instance, here are the list of Invidious instance, the instance should have a working api . If there is a problem with the instance, try switching to another instance. (For example yewtu.be does not have an API and as of writing, vid.puffyan.us gives an error when viewing channel playlists) env Contains user defined variables for commands. keybindings.yml Contains key - action pairs --- Esc: Deselect ? Char: j : Down # etc The syntax might be a bit confusing, here's a rundown of what's happening. Esc: Deselect means action Deselect is binded to the key Esc ? Char: j<BR>: Down means action Down is binded to the key Char('j') Structs: Actions Key Codes command.yml Self defined commands, change the command to use another application. The default apps are konsole as terminal and mpv as media player. --- audio_playlist_shuffle: args: - konsole - \"-e\" - mpv - \"{embed_url}\" - \"--no-video\" - \"--shuffle\" message: Opened mpv in new konsole window video_player: args: - mpv - \"{embed_url}\" - \"--no-terminal\" message: Launched mpv # etc Required fields for a command: args : The command to be launched message : Message displayed when the command is ran page_commands.yml --- \"item_info:video\": - label: Watch video command: video_player - label: Play audio command: audio_player - label: Play audio (loop) command: audio_loop # etc \"item_info:playlist\": - label: Switch view command: \"{switch_view}\" - label: Watch all command: video_player - label: Play all audio command: audio_player - label: Shuffle play all audio command: audio_playlist_shuffle # etc # etc Each page should contains a list of commands, each command should include these fields: label : display label command : command defined in command.yml","title":"Customizations"},{"location":"configs/#config-files","text":"One way to customize YouTube TUI is with config files in ~/.config/youtube-tui , the config files are in the yaml format for easy reading.","title":"Config files"},{"location":"configs/#smart-configs","text":"If there is a missing option in the config files, it will be added automatically If the config files could not be parsed, it will be backed up to config.yml.old (only 1 backup will be created for each file, the newer backup overwrites the older one)","title":"Smart configs"},{"location":"configs/#mainyml","text":"Contains some basic options for the TUI, and also env which will be used in commands. --- max_watch_history: 50 server_url: \"https://invidious.sethforprivacy.com\" env: download_location: ~/Downloads/%(title)s.%(ext)s","title":"main.yml"},{"location":"configs/#max_watch_history","text":"The maximum number of watch history stored, watch history contains the video details and a low definition thumbnail. Watch history can be viewed in the history tab in main menu.","title":"max_watch_history"},{"location":"configs/#server_url","text":"The URL of the Invidious instance, here are the list of Invidious instance, the instance should have a working api . If there is a problem with the instance, try switching to another instance. (For example yewtu.be does not have an API and as of writing, vid.puffyan.us gives an error when viewing channel playlists)","title":"server_url"},{"location":"configs/#env","text":"Contains user defined variables for commands.","title":"env"},{"location":"configs/#keybindingsyml","text":"Contains key - action pairs --- Esc: Deselect ? Char: j : Down # etc The syntax might be a bit confusing, here's a rundown of what's happening. Esc: Deselect means action Deselect is binded to the key Esc ? Char: j<BR>: Down means action Down is binded to the key Char('j') Structs: Actions Key Codes","title":"keybindings.yml"},{"location":"configs/#commandyml","text":"Self defined commands, change the command to use another application. The default apps are konsole as terminal and mpv as media player. --- audio_playlist_shuffle: args: - konsole - \"-e\" - mpv - \"{embed_url}\" - \"--no-video\" - \"--shuffle\" message: Opened mpv in new konsole window video_player: args: - mpv - \"{embed_url}\" - \"--no-terminal\" message: Launched mpv # etc Required fields for a command: args : The command to be launched message : Message displayed when the command is ran","title":"command.yml"},{"location":"configs/#page_commandsyml","text":"--- \"item_info:video\": - label: Watch video command: video_player - label: Play audio command: audio_player - label: Play audio (loop) command: audio_loop # etc \"item_info:playlist\": - label: Switch view command: \"{switch_view}\" - label: Watch all command: video_player - label: Play all audio command: audio_player - label: Shuffle play all audio command: audio_playlist_shuffle # etc # etc Each page should contains a list of commands, each command should include these fields: label : display label command : command defined in command.yml","title":"page_commands.yml"},{"location":"getting-started/","text":"Introduction This is a simple straighfoward guide to using the TUI, from installation to actually using it. Installation The YouTube TUI is fairly straight foward and user friendly, and anyone with a 3 digit IQ should have no issue installing and using it. Build dependencies Rust is required to install the YouTube TUI, which will be used to build the binary from source. To check if you have Rust installed, run the following commnads. If it isn't installed, please follow the Rust installation guide cargo -V # example output: `cargo 1.60.0 (d1fd9fe 2022-03-01)` Install using Cargo To install the latest version of YouTube TUI, run the following command. If there are errors and the app failed to build, try searching Stack Overflow with the error message, it is most likely caused by missing dependencies (most commonly openssl). cargo install youtube-tui Usage Here is a quick run down to using the TUI To Launch To launch the TUI, run the following command in your terminal. If it didn't work as expected, try adding ~/.cargo/bin to $PATH . youtube-tui # or path to the binary Navigation (The following navigation keys are defined in the config files ( keybindings.yml ), in this section I will be referring to the default keybindings in the latest version of the TUI) When you first launch the TUI, you will be put in something that resembles the YouTube home page. Use the arrow keys or Vim keybindings to move your cursor in the correponding direction. Outline of item with your cursor on should turn red. To interact with the item your cursor is hovering on, press enter . Either the item is a button and will do whatever it does when pressed (e.g. go to another page) or the item will be selected. Once the item is selected, all your key presses will be passed into that item for it to handle the key presses . The selected item should have an outline color of yellow. Most items should follow the same keybindings defined in keybindings.yml , with the exception of the search bar where Vim keybindings does not work (ofc). To deselect an item, press Esc . You can now move your cursor around and select other items. Additional keybindings Here are some additional keybindings for navigating around in the TUI. Key Effect Backspace Go back in history Home Goes back to homepage Page Up/Down First/Last item in a list End Clear history Q Exit TUI (Note that history mentioned here is not watch history, they are completely different things) Customizations Almost everything about this program can be customized excatly to your likings, things that are customizable includes: Video download locations Invidious instance (URL) Screen layout Keybindings Commands ran for each action (for example using vlc instead of the default mpv as media player) Options avaliable on each page All config files are located in ~/.config/youtube-tui . In the next sections we will go through the options in each files.","title":"Getting Started"},{"location":"getting-started/#introduction","text":"This is a simple straighfoward guide to using the TUI, from installation to actually using it.","title":"Introduction"},{"location":"getting-started/#installation","text":"The YouTube TUI is fairly straight foward and user friendly, and anyone with a 3 digit IQ should have no issue installing and using it.","title":"Installation"},{"location":"getting-started/#build-dependencies","text":"Rust is required to install the YouTube TUI, which will be used to build the binary from source. To check if you have Rust installed, run the following commnads. If it isn't installed, please follow the Rust installation guide cargo -V # example output: `cargo 1.60.0 (d1fd9fe 2022-03-01)`","title":"Build dependencies"},{"location":"getting-started/#install-using-cargo","text":"To install the latest version of YouTube TUI, run the following command. If there are errors and the app failed to build, try searching Stack Overflow with the error message, it is most likely caused by missing dependencies (most commonly openssl). cargo install youtube-tui","title":"Install using Cargo"},{"location":"getting-started/#usage","text":"Here is a quick run down to using the TUI","title":"Usage"},{"location":"getting-started/#to-launch","text":"To launch the TUI, run the following command in your terminal. If it didn't work as expected, try adding ~/.cargo/bin to $PATH . youtube-tui # or path to the binary","title":"To Launch"},{"location":"getting-started/#navigation","text":"(The following navigation keys are defined in the config files ( keybindings.yml ), in this section I will be referring to the default keybindings in the latest version of the TUI) When you first launch the TUI, you will be put in something that resembles the YouTube home page. Use the arrow keys or Vim keybindings to move your cursor in the correponding direction. Outline of item with your cursor on should turn red. To interact with the item your cursor is hovering on, press enter . Either the item is a button and will do whatever it does when pressed (e.g. go to another page) or the item will be selected. Once the item is selected, all your key presses will be passed into that item for it to handle the key presses . The selected item should have an outline color of yellow. Most items should follow the same keybindings defined in keybindings.yml , with the exception of the search bar where Vim keybindings does not work (ofc). To deselect an item, press Esc . You can now move your cursor around and select other items.","title":"Navigation"},{"location":"getting-started/#additional-keybindings","text":"Here are some additional keybindings for navigating around in the TUI. Key Effect Backspace Go back in history Home Goes back to homepage Page Up/Down First/Last item in a list End Clear history Q Exit TUI (Note that history mentioned here is not watch history, they are completely different things)","title":"Additional keybindings"},{"location":"getting-started/#customizations","text":"Almost everything about this program can be customized excatly to your likings, things that are customizable includes: Video download locations Invidious instance (URL) Screen layout Keybindings Commands ran for each action (for example using vlc instead of the default mpv as media player) Options avaliable on each page All config files are located in ~/.config/youtube-tui . In the next sections we will go through the options in each files.","title":"Customizations"}]}